if [[ -n "$ZSHRC_DEBUG" ]]; then
    zmodload zsh/zprof
    echo "[$(date +%s.%N)] Starting zshrc"
fi

export DOTFILES="$HOME/Code/Repos/github.com/kzh/dotfiles"
export EDITOR='nvim'
export VISUAL="$EDITOR"
export GOPATH="$HOME/Code/Go"
export GOBIN="$GOPATH/bin"
export NVM_DIR="$HOME/.nvm"
export PULUMI_SKIP_UPDATE_CHECK=true
export TERM=xterm-256color

export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
export XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"
export XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"

export LESS='-R -X -i --mouse --wheel-lines=3 -P ?f%f:(stdin). ?lb%lb?L/%L.. [?eEOF:?pb%pb\%..]'
export LESSCHARSET='utf-8'
export PAGER='less'
export MANPAGER='less'
export DELTA_PAGER='less -R --mouse'

export PYTHONDONTWRITEBYTECODE=1
export PIPENV_VENV_IN_PROJECT=1

export GPG_TTY=$(tty)

export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
typeset -U PATH path

path=(
    $HOME/.local/bin
    $HOME/.cache/.bun/bin
    $HOME/.bun/bin
    $HOME/.cargo/bin
    $GOBIN
    $path
)

export PATH
export FZF_DEFAULT_OPTS="
	--color=fg:#797593
	--color=fg+:#575279
	--color=bg:#faf4ed
	--color=bg+:#f2e9de
	--color=hl:#d7827e
	--color=hl+:#d7827e
	--color=info:#56949f
	--color=marker:#b4637a
	--color=prompt:#286983
	--color=spinner:#ea9d34
	--color=pointer:#907aa9
	--color=header:#907aa9
	--color=border:#9893a5
	--color=gutter:#faf4ed"

if command -v fd &> /dev/null; then
    export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
    export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
    export FZF_ALT_C_COMMAND='fd --type d --hidden --follow --exclude .git'
fi
HISTFILE="${HISTFILE:-$HOME/.zsh_history}"
HISTSIZE=100000
SAVEHIST=100000
setopt EXTENDED_HISTORY
setopt HIST_EXPIRE_DUPS_FIRST
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_FIND_NO_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_SAVE_NO_DUPS
setopt HIST_REDUCE_BLANKS
setopt HIST_VERIFY
setopt SHARE_HISTORY
setopt BANG_HIST
setopt INC_APPEND_HISTORY
setopt HIST_FCNTL_LOCK
setopt HIST_NO_STORE
setopt HIST_LEX_WORDS
setopt AUTO_CD
setopt AUTO_PUSHD
setopt PUSHD_IGNORE_DUPS
setopt PUSHD_SILENT
setopt CDABLE_VARS
setopt PUSHD_TO_HOME
setopt INTERACTIVE_COMMENTS
setopt GLOB_COMPLETE
setopt NUMERIC_GLOB_SORT
setopt NO_BEEP
setopt COMPLETE_IN_WORD
setopt ALWAYS_TO_END
setopt PATH_DIRS
setopt AUTO_MENU
setopt AUTO_LIST
setopt AUTO_PARAM_SLASH
setopt MENU_COMPLETE
setopt FLOW_CONTROL
setopt MAGIC_EQUAL_SUBST

typeset -U fpath
fpath=($DOTFILES/config/shell/completions $fpath)

if [[ ! -d "$HOME/.oh-my-zsh" ]]; then
    echo "Oh My Zsh not found. Run install script first."
else
    export ZSH="$HOME/.oh-my-zsh"
    ZSH_THEME="robbyrussell"
    DISABLE_UPDATE_PROMPT=true
    DISABLE_AUTO_UPDATE=true
        [[ ! -d "${HOME}/.cache/zsh" ]] && mkdir -p "${HOME}/.cache/zsh"
    ZSH_COMPDUMP="${HOME}/.cache/zsh/zcompdump-${ZSH_VERSION}"
    CASE_SENSITIVE=false
    COMPLETION_WAITING_DOTS=false
    ZSH_DISABLE_COMPFIX=true
    DISABLE_UNTRACKED_FILES_DIRTY=true

        plugins=(
      git
      history-substring-search
      fast-syntax-highlighting
      zsh-autosuggestions
    )

    command -v docker >/dev/null 2>&1 && plugins+=(docker)
    command -v kubectl >/dev/null 2>&1 && plugins+=(kubectl)
    command -v go >/dev/null 2>&1 && plugins+=(golang)
    command -v cargo >/dev/null 2>&1 && plugins+=(rust)
    command -v npm >/dev/null 2>&1 && plugins+=(npm)
    command -v aws >/dev/null 2>&1 && plugins+=(aws)

    source $ZSH/oh-my-zsh.sh

fi

    zstyle ':completion:*' menu select
    zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
    zstyle ':completion:*' use-cache on
    zstyle ':completion:*' cache-path "$HOME/.cache/zsh/zcompcache"
    zstyle ':completion:*' completer _complete _match _approximate
    zstyle ':completion:*:match:*' original only
    zstyle ':completion:*:approximate:*' max-errors 1 numeric

    bindkey '^[[A' history-substring-search-up
    bindkey '^[[B' history-substring-search-down
    bindkey '^P' history-substring-search-up
    bindkey '^N' history-substring-search-down

    bindkey -s '^f' '~/.config/terminal/tmux/scripts/tmux-sessionizer\n'

    [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

    if command -v direnv >/dev/null 2>&1; then
        _direnv_hook() {
            trap -- '' SIGINT
            eval "$(direnv export zsh)"
            trap - SIGINT
        }
        typeset -ag precmd_functions
        if [[ -z ${precmd_functions[(r)_direnv_hook]+1} ]]; then
            precmd_functions=( _direnv_hook ${precmd_functions[@]} )
        fi
        typeset -ag chpwd_functions
        if [[ -z ${chpwd_functions[(r)_direnv_hook]+1} ]]; then
            chpwd_functions=( _direnv_hook ${chpwd_functions[@]} )
        fi
    fi

    if command -v atuin >/dev/null 2>&1; then
        eval "$(atuin init zsh --disable-up-arrow)"
    fi

if [[ -f ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/fzf-tab/fzf-tab.plugin.zsh ]]; then
    source ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/fzf-tab/fzf-tab.plugin.zsh
fi

RPROMPT='%F{241}%D{%I:%M:%S %p}%f'

if [ -s "$NVM_DIR/nvm.sh" ] && [ ! "$(command -v nvm)" ]; then
    nvm() {
        unset -f nvm node npm npx
        . "$NVM_DIR/nvm.sh"
        nvm "$@"
    }
    node() {
        unset -f nvm node npm npx
        . "$NVM_DIR/nvm.sh"
        node "$@"
    }
    npm() {
        unset -f nvm node npm npx
        . "$NVM_DIR/nvm.sh"
        npm "$@"
    }
    npx() {
        unset -f nvm node npm npx
        . "$NVM_DIR/nvm.sh"
        npx "$@"
    }
fi

if [ -f "$HOME/.cargo/env" ] && [ ! "$(command -v cargo)" ]; then
    cargo() {
        unset -f cargo rustc rustup
        . "$HOME/.cargo/env"
        cargo "$@"
    }
    rustc() {
        unset -f cargo rustc rustup
        . "$HOME/.cargo/env"
        rustc "$@"
    }
    rustup() {
        unset -f cargo rustc rustup
        . "$HOME/.cargo/env"
        rustup "$@"
    }
fi

if [ -d "$HOME/Code/google-cloud-sdk" ] && [ ! "$(command -v gcloud)" ]; then
    gcloud() {
        unset -f gcloud
        [ -f "$HOME/Code/google-cloud-sdk/path.zsh.inc" ] && . "$HOME/Code/google-cloud-sdk/path.zsh.inc"
        [ -f "$HOME/Code/google-cloud-sdk/completion.zsh.inc" ] && . "$HOME/Code/google-cloud-sdk/completion.zsh.inc"
        gcloud "$@"
    }
fi

    # General aliases moved to modular file: ~/.config/zsh/conf.d/aliases.zsh
    # Kept here intentionally blank to avoid duplication.

    

    

    

    

    

    

    
    if [[ "$OSTYPE" == "darwin"* ]] && [[ -x /Applications/Tailscale.app/Contents/MacOS/Tailscale ]]; then
        function tailscale() {
            /Applications/Tailscale.app/Contents/MacOS/Tailscale "$@"
        }
        alias ts='tailscale'
        alias tssh='tailscale ssh'
    elif command -v tailscale >/dev/null 2>&1; then
        alias ts='tailscale'
        alias tssh='tailscale ssh'
    fi

    
    
    

    

    


    

    

    
    ZSH_AUTOSUGGEST_STRATEGY=(history completion)
    ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
    ZSH_AUTOSUGGEST_USE_ASYNC=1
    ZSH_AUTOSUGGEST_MANUAL_REBIND=1

    

    

[ -f ~/.zshrc.local ] && source ~/.zshrc.local

# Optional modular loader: source user modules without changing core behavior
ZSH_EXTRA_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/zsh"
if [[ -d "$ZSH_EXTRA_DIR/conf.d" ]]; then
    for f in "$ZSH_EXTRA_DIR"/conf.d/*.zsh; do
        [[ -r "$f" ]] && source "$f"
    done
fi
# Machine-specific overrides
[[ -r "$ZSH_EXTRA_DIR/local.zsh" ]] && source "$ZSH_EXTRA_DIR/local.zsh"

if [[ ! -f "$HOME/.zshrc.zwc" || "$HOME/.zshrc" -nt "$HOME/.zshrc.zwc" ]]; then
    zcompile "$HOME/.zshrc" 2>/dev/null
fi
if command -v zoxide >/dev/null 2>&1; then
    z() {
        unfunction z zi
        eval "$(zoxide init zsh)"
        z "$@"
    }

    zi() {
        unfunction z zi
        eval "$(zoxide init zsh)"
        zi "$@"
    }
fi

 
if [[ -n "$ZSHRC_DEBUG" ]]; then
    echo "[$(date +%s.%N)] Finished zshrc"
    zprof
fi
